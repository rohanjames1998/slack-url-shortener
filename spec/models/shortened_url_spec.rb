require 'rails_helper'
require 'securerandom'

RSpec.describe ShortenedUrl, type: :model do
  describe "validations" do
    # Subject is explicitly defined to avoid PG::NotNullViolation error caused of validate_uniqueness_of matcher.
    subject { ShortenedUrl.new(full_url: "https://www.example.com", short_url: "abcdefg")}
    it { should validate_presence_of(:full_url) }
    it { should validate_uniqueness_of(:full_url) }
    it { should validate_presence_of(:short_url) }
    it { should validate_uniqueness_of(:short_url) }
  end

  describe "#unique_string" do
    let(:shortened_url) { ShortenedUrl.new }
    context "if string generated by random generator is not unique" do
      it "generates a new random string" do
        allow(ShortenedUrl).to receive(:exists?).and_return(true, false)
        expect(SecureRandom).to receive(:hex).with(4).twice
        shortened_url.unique_string
      end
    end
    context "when string generated by random generator is unique" do
      it "returns the string" do
        unique_string = "abcd1234"
        allow(SecureRandom).to receive(:hex).and_return(unique_string)
        allow(ShortenedUrl).to receive(:exists?).and_return(false)
        output = shortened_url.unique_string
        expect(output).to eq(unique_string)
      end
    end
  end
end

